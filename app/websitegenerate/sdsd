'use client'
import React, { useState, useEffect, useRef } from 'react';
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card } from "@/components/ui/card"
import { ChevronLeft, ChevronRight, Wand2, PlayCircle, PauseCircle, Download } from 'lucide-react';
import { jsPDF } from "jspdf";
import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";
import { Book, Home, Info, Settings } from "lucide-react"
import Link from 'next/link';

const StoryBookPage = () => {
  const [storyType, setStoryType] = useState('');
  const [generatedStory, setGeneratedStory] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [chatSession, setChatSession] = useState(null);
  const [currentPage, setCurrentPage] = useState(0);
  const [storyPages, setStoryPages] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [audioUrl, setAudioUrl] = useState('');
  const [audioBlob, setAudioBlob] = useState(null);
  const audioRef = useRef(null);

  useEffect(() => {
    const initializeChatSession = async () => {
      const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
      const genAI = new GoogleGenerativeAI(apiKey);

      const model = genAI.getGenerativeModel({
        model: "gemini-1.5-flash",
      });

      const generationConfig = {
        temperature: 1,
        topP: 0.95,
        topK: 64,
        maxOutputTokens: 8192,
      };

      const safetySettings = [
        {
          category: HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        },
        {
          category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        },
      ];

      const newChatSession = model.startChat({
        generationConfig,
        safetySettings,
      });

      setChatSession(newChatSession);
    };

    initializeChatSession();
  }, []);

  const generateStory = async () => {
    if (!chatSession) {
      console.error('Chat session not initialized');
      return;
    }

    setIsLoading(true);
    try {
      const result = await chatSession.sendMessage(
        `Generate a short story book for children about ${storyType}. 
        Format the story as follows:
        1. Split the story into short paragraphs of 2-3 sentences each.
        2. Separate each paragraph with a newline character.
        3. Keep the total word count under 500 words.`
      );
      const response = result.response;
      setGeneratedStory(response.text());
      formatStoryIntoPages(response.text());
      generateAudio(response.text());
    } catch (error) {
      console.error('Error generating story:', error);
      setGeneratedStory('An error occurred while generating the story. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const formatStoryIntoPages = (story) => {
    const paragraphs = story.split('\n').filter(p => p.trim() !== '');
    const pages = [];
    let currentPage = [];

    paragraphs.forEach((paragraph, index) => {
      currentPage.push(paragraph);
      if (currentPage.length === 2 || index === paragraphs.length - 1) {
        pages.push(currentPage);
        currentPage = [];
      }
    });

    setStoryPages(pages);
    setCurrentPage(0);
  };

  const generateAudio = async (text) => {
    const url = "https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM";

    const headers = {
      "Accept": "audio/mpeg",
      "Content-Type": "application/json",
      "xi-api-key": 'sk_7d34719ad0e480bf2d2d00bae2d8838e9afcae670bb01d7a'
    };

    const data = {
      text: text,
      model_id: "eleven_monolingual_v1",
      voice_settings: {
        stability: 0.5,
        similarity_boost: 0.5
      }
    };

    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const blob = await response.blob();
      setAudioBlob(blob);
      const audioUrl = URL.createObjectURL(blob);
      setAudioUrl(audioUrl);
    } catch (error) {
      console.error('Error generating audio:', error);
    }
  };

  const togglePlayPause = () => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.pause();
      } else {
        audioRef.current.play();
      }
      setIsPlaying(!isPlaying);
    }
  };

  const nextPage = () => {
    if (currentPage < storyPages.length - 1) {
      setCurrentPage(currentPage + 1);
    }
  };

  const prevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  const downloadPDF = () => {
    const pdf = new jsPDF();
    let y = 20;
    pdf.setFont("helvetica", "bold");
    pdf.setFontSize(16);
    pdf.text(`A Story About ${storyType}`, 105, y, { align: "center" });
    y += 20;
    pdf.setFont("helvetica", "normal");
    pdf.setFontSize(12);
    storyPages.forEach((page, index) => {
      pdf.text(`Page ${index + 1}`, 20, y);
      y += 10;
      page.forEach(paragraph => {
        const lines = pdf.splitTextToSize(paragraph, 170);
        lines.forEach(line => {
          if (y > 270) {
            pdf.addPage();
            y = 20;
          }
          pdf.text(line, 20, y);
          y += 7;
        });
        y += 5;
      });
      y += 10;
    });
    pdf.save("storybook.pdf");
  };

  const downloadAudio = () => {
    if (audioBlob) {
      const url = window.URL.createObjectURL(audioBlob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = 'storybook_audio.mp3';
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
    }
  };

  return (
    <>
 <nav className="bg-gradient-to-r from-purple-800 to-indigo-800 p-4 sticky top-0 z-10 shadow-lg">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <Book className="text-white h-8 w-8" />
            <span className="text-2xl font-bold text-white">Story Wizard</span>
          </div>
          <div className="flex space-x-4">
          <Link href='/'>
            <Button variant="ghost" className="text-white hover:text-purple-200 hover:bg-purple-700 transition-colors duration-300">
            <Home className="mr-2 h-5 w-5" /> Home
            </Button>
            </Link>
          
            
          </div>
        </div>
      </nav>



    <div className=" mx-auto p-4 bg-gray-900 min-h-screen text-white" >
 
      <h1 className="text-4xl font-bold mb-8 pt-8 text-center text-purple-400 font-['Comic_Sans_MS']">
        <Book className="inline-block mr-2" />
        Magical Story Book Creator
      </h1>
      <div className="space-y-4 mb-8">
        <div className="relative">
          <Input
            type="text"
            value={storyType}
            onChange={(e) => setStoryType(e.target.value)}
            placeholder="What's your story about?"
            className="w-full pl-10 pr-4 py-2 rounded-full border-2 border-purple-500 bg-gray-800 text-white focus:border-purple-400 focus:ring focus:ring-purple-300 focus:ring-opacity-50"
          />
          <Wand2 className="absolute left-3 top-1/2 transform -translate-y-1/2 text-purple-400" />
        </div>
        <Button
          onClick={generateStory}
          disabled={isLoading || !storyType || !chatSession}
          className="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105"
        >
          {isLoading ? 'Weaving Magic...' : 'Create Your Story!'}
        </Button>
      </div>
      {storyPages.length > 0 && (
        <div className="mt-8">
          <Card className="p-8 bg-gray-800 rounded-3xl shadow-lg border border-purple-500">
            <div className="flex justify-between items-center mb-4">
              <Button
                onClick={prevPage}
                disabled={currentPage === 0}
                className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full flex items-center"
              >
                <ChevronLeft className="mr-1" /> Previous
              </Button>
              <span className="text-lg font-semibold text-purple-400">Page {currentPage + 1} of {storyPages.length}</span>
              <Button
                onClick={nextPage}
                disabled={currentPage === storyPages.length - 1}
                className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full flex items-center"
              >
                Next <ChevronRight className="ml-1" />
              </Button>
            </div>
            <div className="flex justify-between h-80 bg-gray-700 rounded-2xl p-6 shadow-inner">
              <div className="w-1/2 p-4 border-r-2 border-dashed border-purple-500">
                <p className="text-xl font-['Comic_Sans_MS'] leading-relaxed text-gray-200">{storyPages[currentPage][0]}</p>
              </div>
              <div className="w-1/2 p-4">
                <p className="text-xl font-['Comic_Sans_MS'] leading-relaxed text-gray-200">{storyPages[currentPage][1]}</p>
              </div>
            </div>
            <div className="mt-4 flex justify-center space-x-4">
              {audioUrl && (
                <Button
                  onClick={togglePlayPause}
                  className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full flex items-center"
                >
                  {isPlaying ? <PauseCircle className="mr-2" /> : <PlayCircle className="mr-2" />}
                  {isPlaying ? 'Pause' : 'Play'} Story
                </Button>
              )}
              <Button
                onClick={downloadPDF}
                className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full flex items-center"
              >
                <Download className="mr-2" /> Download PDF
              </Button>
              {audioBlob && (
                <Button
                  onClick={downloadAudio}
                  className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full flex items-center"
                >
                  <Download className="mr-2" /> Download Audio
                </Button>
              )}
            </div>
            <audio ref={audioRef} src={audioUrl} onEnded={() => setIsPlaying(false)} />
          </Card>
        </div>
      )}
    </div>
    </>
  );
};

export default StoryBookPage;